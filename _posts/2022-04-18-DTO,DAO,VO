---
layout: single
title:  "DTO,DAO,VO,Entity"
published: true
categories: Spring
tag: [Java, Spring, Spring framework]
toc: true
---

# DAO(Data Access Object)
 DB의 data에 접근하기 위한 객체
 DataBase에 접근 하기 위한 로직 & 비지니스 로직을 분리하기 위해 사용
 service와 DB를 연결하는 고리의 역할을 한다.

 # DTO(Data Transfer Object)
  계층간 교환을 하기 위해 사용하는 객체, 로직을 가지지 않는 순수 데이터 객체(getter&setter)
   - DB에서 데이터를 얻어 Service나 Controller 등으터 보낼 때 사용하는 객체를 말한다.
   - DB에서 꺼낸 값을 임의로 변경할 필요가 없기 때문에 DTO클래스에는 setter가 없다.
      (생성자에서 값을 할당한다.)

  ->유저가 입력한 데이터를 DB에 넣을때
   - 유저가 자신의 브라우저에서 데이터를 입력하여 form에 있는 데이터를 DTO에 넣어서 전송
   - 해당 DTO를 받은 서버가 DAO를 이용하여 데이터베이스로 데이터를 집어넣는다

# VO(Value Only)
 DTO와 동일한 개념이지만 read-only, 변경이 불가능

 # Entity Class
 실제 DB의 테이블과 매칭될 클래스, 테이블과 링크될 클래스임을 나타낸다.
  -Entity 클래스 또는 가장 Core한 클래스라고 부른다.
  -@Entity, @Column, @Id 등을 이용
 최대한 외부에서 Entity 클래스의 getter method를 사용하지 않도록 해당 클래스 안에서 필요한 로직 method을 구현한다.
  -단, Domain Logic만 가지고 있어야 하고 Presentation Logic을 가지고 있어서는 안된다.
  -구현한 method는 주로 Service Layer에서 사용한다.
